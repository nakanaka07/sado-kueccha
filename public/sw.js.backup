// Service Worker for 佐渡で食えっちゃ
// Vite PWA Plugin による自動生成版 - 簡素化されたキャッシュ戦略

const CACHE_NAME = "sado-kueccha-v3";
const STATIC_CACHE = "static-v3";
const DYNAMIC_CACHE = "dynamic-v3";

// 基本的なクリティカルアセット
const CRITICAL_ASSETS = ["/", "/index.html", "/assets/title_row2.png"];

// インストール時: 基本的なアセットのみキャッシュ
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(STATIC_CACHE).then((cache) => {
      return cache.addAll(CRITICAL_ASSETS);
    }),
  );
  self.skipWaiting();
});

// アクティベート時: 古いキャッシュを削除
self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (!cacheName.includes("v3")) {
            return caches.delete(cacheName);
          }
        }),
      );
    }),
  );
  self.clients.claim();
});

// フェッチ時: シンプルなキャッシュ戦略
self.addEventListener("fetch", (event) => {
  // Google APIs は除外
  if (event.request.url.includes("googleapis.com") || event.request.url.includes("google.com")) {
    return;
  }

  event.respondWith(
    caches
      .match(event.request)
      .then((response) => {
        return (
          response ||
          fetch(event.request).then((fetchResponse) => {
            const cache = caches.open(DYNAMIC_CACHE);
            cache.then((c) => c.put(event.request, fetchResponse.clone()));
            return fetchResponse;
          })
        );
      })
      .catch(() => {
        // オフライン時のフォールバック
        if (event.request.destination === "document") {
          return caches.match("/index.html");
        }
      }),
  );
});
