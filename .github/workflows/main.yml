name: Build and Deploy to GitHub Pages

# ワークフロー実行のトリガー設定
on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "public/**"
      - "index.html"
      - "package.json"
      - "pnpm-lock.yaml"
      - "vite.config.ts"
      - "tsconfig*.json"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "docs/**"
  # リリースタグでのデプロイ
  release:
    types: [published]
  # 手動実行のためのオプション
  workflow_dispatch:

# セキュリティ強化：最小権限の原則
permissions:
  contents: read
  pages: write
  id-token: write

# 並行実行制御：同時デプロイの防止
concurrency:
  group: "pages"
  cancel-in-progress: false

# デフォルト実行環境の設定
env:
  NODE_VERSION: "22" # 最新のLTS Node.jsバージョン（2025年5月現在）
  PNPM_VERSION: "10" # 最新のpnpmメジャーバージョン（2025年5月現在）

jobs:
  # 品質チェック（PR用）
  quality-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm type-check

      - name: Run linting
        run: pnpm lint

      - name: Run formatting check
        run: pnpm format:check

      - name: Run tests
        run: pnpm test
  # ビルドとデプロイ（メインブランチまたはリリース用）
  build-and-deploy:
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 完全な履歴を取得      # pnpmのインストール
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      # Node.jsのセットアップ（公式推奨のシンプルなキャッシュ戦略）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      # 依存関係のインストール（セキュリティ強化）
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 品質チェック（ビルド前）
      - name: Run type checking
        run: pnpm type-check

      - name: Run linting
        run: pnpm lint

      - name: Run tests
        run: pnpm test # リポジトリ名から動的にベースパスを設定      # 環境変数の検証
      - name: Verify environment variables
        run: |
          echo "Checking environment variables..."
          echo "NODE_ENV: $NODE_ENV"
          echo "CI: $CI"
          echo "VITE_BASE_PATH: $VITE_BASE_PATH"
          [ -n "$VITE_GOOGLE_MAPS_API_KEY" ] && echo "✅ VITE_GOOGLE_MAPS_API_KEY is set" || echo "❌ VITE_GOOGLE_MAPS_API_KEY is missing"
          [ -n "$VITE_GOOGLE_SPREADSHEET_ID" ] && echo "✅ VITE_GOOGLE_SPREADSHEET_ID is set" || echo "❌ VITE_GOOGLE_SPREADSHEET_ID is missing"
          [ -n "$VITE_EMAILJS_SERVICE_ID" ] && echo "✅ VITE_EMAILJS_SERVICE_ID is set" || echo "❌ VITE_EMAILJS_SERVICE_ID is missing"
          [ -n "$VITE_BASE_PATH" ] && echo "✅ VITE_BASE_PATH is set" || echo "❌ VITE_BASE_PATH is missing"
          [ -n "$VITE_SHEET_RECOMMENDED" ] && echo "✅ VITE_SHEET_RECOMMENDED is set" || echo "❌ VITE_SHEET_RECOMMENDED is missing"
        env:
          CI: true
          VITE_BASE_PATH: /${{ github.event.repository.name }}/
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
          VITE_GOOGLE_SPREADSHEET_ID: ${{ secrets.VITE_GOOGLE_SPREADSHEET_ID }}
          VITE_SHEET_RECOMMENDED: "recommended:1043711248"
          VITE_EMAILJS_SERVICE_ID: ${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          NODE_ENV: production

      # アプリケーションのビルド（改良された設定）
      - name: Build application
        run: |
          echo "Starting build process..."
          echo "Repository name: ${{ github.event.repository.name }}"
          echo "Base path: /${{ github.event.repository.name }}/"
          pnpm build
          echo "Build process completed"
          echo "Checking build output..."
          ls -la
          if [ -d "./dist" ]; then
            echo "✅ dist directory found"
            ls -la ./dist
            echo "Dist directory size: $(du -sh ./dist)"
          else
            echo "❌ dist directory not found"
            echo "Searching for build output..."
            find . -name "*.html" -o -name "*.js" -o -name "*.css" | head -10
            exit 1
          fi
        env:
          CI: true
          VITE_BASE_PATH: /${{ github.event.repository.name }}/
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
          VITE_GOOGLE_MAPS_MAP_ID: ${{ secrets.VITE_GOOGLE_MAPS_MAP_ID }}
          VITE_GOOGLE_SHEETS_API_KEY: ${{ secrets.VITE_GOOGLE_SHEETS_API_KEY }}
          VITE_GOOGLE_SPREADSHEET_ID: ${{ secrets.VITE_GOOGLE_SPREADSHEET_ID }}
          VITE_SHEET_RECOMMENDED: "recommended:1043711248"
          VITE_SHEET_RYOTSU_AIKAWA: "ryotsu_aikawa:95850266"
          VITE_SHEET_KANAI_SAWADA: "kanai_sawada:431330115"
          VITE_SHEET_AKADOMARI_HAMOCHI: "akadomari_hamochi:1375085632"
          VITE_SHEET_SNACK: "snack:490189070"
          VITE_SHEET_TOILET: "toilet:1271565248"
          VITE_SHEET_PARKING: "parking:716861286"
          VITE_EMAILJS_SERVICE_ID: ${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID: ${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}
          VITE_EMAILJS_PUBLIC_KEY: ${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
          NODE_ENV: production
          NODE_OPTIONS: "--max_old_space_size=4096"

      # ビルド成果物の詳細検証
      - name: Verify build output
        run: |
          echo "Verifying build output..."
          if [ ! -d "./dist" ]; then
            echo "❌ Error: Build output directory not found"
            echo "Available directories:"
            ls -la
            exit 1
          fi

          if [ ! -f "./dist/index.html" ]; then
            echo "❌ Warning: index.html not found in dist"
            echo "Contents of dist directory:"
            ls -la ./dist
            exit 1
          fi

          echo "✅ Build verification successful"
          echo "Dist directory size: $(du -sh ./dist)"
          echo "Number of files: $(find ./dist -type f | wc -l)"

      # GitHub Pagesの設定
      - name: Setup Pages
        uses: actions/configure-pages@v4 # アーティファクトのアップロード
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"

      # GitHub Pagesへのデプロイ（新しい推奨方法）
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # デプロイ成功の確認
      - name: Verify deployment
        run: |
          echo "Deployment URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Deployment successful at $(date)"
